% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bs-dependencies.R
\name{bs_dependency}
\alias{bs_dependency}
\alias{bs_dependency_dynamic}
\title{Create a Bootstrap dependency}
\usage{
bs_dependency(
  input = list(),
  theme,
  name,
  version,
  cache_key_extra = NULL,
  .dep_args = list(),
  .sass_args = list()
)

bs_dependency_dynamic(func)
}
\arguments{
\item{func}{a function that takes a \code{\link[=bs_theme]{bs_theme()}} object (or \code{theme_default})
as input and and returns an \code{\link[=htmlDependency]{htmlDependency()}} (or a list of them).}
}
\description{
Create a Bootstrap dependency

Note that \code{func} should not be created in a closure -- for Shiny to
deduplicate the html dependencies, it needs to be able to tell that the
\code{func} from a previous invocation is \code{identical()} to the \code{func} in later
invocations. In order to that, the
}
\examples{


myWidgetVersion <- "1.2.3"

myWidgetDependency <- function() {
  list(
    bs_dependency_dynamic(myWidgetCss),
    htmlDependency(
      name = "mywidget-js",
      version = myWidgetVersion,
      src = system.file(package = "mypackage", "js"),
      script = "mywidget.js"
    )
  )
}

myWidgetCSS <- function(theme) {
  if (!is_bs_theme(theme)) {
    return(
      htmlDependency(
        name = "mywidget-css",
        version = myWidgetVersion,
        src = system.file(package = "mypackage", "css"),
        stylesheet = "mywidget.css"
      )
    )
  }

  # Remap some variable names and include mywidget.scss. (In other cases it
  # may make sense to only include the sass_file().)
  sass_input <- list(
    list(
      bg = "$input-bg",
      fg = "$input-color",
      `font-family` = "$font-family-base"
    ),
    sass::sass_file(system.file(package = "mypackage", "scss", "mywidget.scss"))
  )

  bs_dependency(
    input = sass_input,
    theme = theme,
    name = "mywidget",
    version = myWidgetVersion,
    cache_key_extra = utils::packageVersion("mypackage")
  )
}

\dontrun{
# Note that myWidgetDepdency is not defined inside of myWidget. This is so
# that, if `myWidget()` is called multiple times, Shiny can tell that the
# function objects are identical and deduplicate them.
# TODO: Maybe Shiny should check for identical outputs, and warn in that case
# that a dependency function isn't being deduped.
# TODO: Check if/how browser reloads mywidget/mywidget.css even if the URL
# is the same a second time.
myWidget <- function(id) {
  div(
    id = id,
    span("myWidget"),
    myWidgetDependency()
  )
}
}

}
