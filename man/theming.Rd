% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/themes.R
\name{bs_theme_new}
\alias{bs_theme_new}
\alias{bs_theme_add_variables}
\alias{bs_theme_add}
\alias{bs_theme_get}
\alias{bs_theme_set}
\title{Create a Bootstrap theme}
\usage{
bs_theme_new(bootswatch = NULL, version = version_default())

bs_theme_add_variables(...)

bs_theme_add(defaults = "", rules = "", ...)

bs_theme_get()

bs_theme_set(theme)
}
\arguments{
\item{bootswatch}{The name of a bootswatch theme.
See \code{\link[=bootswatch_themes]{bootswatch_themes()}} for a list of possible names.}

\item{version}{The major version of Bootstrap to use. A value of
\code{'4-3'} means Bootstrap 4, but with additional CSS/JS to support
BS3 style markup in BS4. Other supported versions include 3 and 4.}

\item{...}{For \code{bs_theme_add_variables()}, these arguments define SASS variables;
otherwise, these arguments are passed along to \code{\link[sass:sass_layer]{sass::sass_layer()}}.}

\item{defaults}{Any \code{\link[sass:as_sass]{sass::as_sass()}} \code{input} to place before Bootstrap's SASS imports.}

\item{rules}{Any \code{\link[sass:as_sass]{sass::as_sass()}} \code{input} to place after Bootstrap's SASS imports.}

\item{theme}{a theme object (i.e., the return value of \code{bs_theme_get()}).}
}
\description{
Use \code{\link[=bs_theme_set]{bs_theme_set()}} to set a global Bootstrap SASS which
\code{\link[=bootstrap]{bootstrap()}} (or \code{\link[=bootstrap_sass]{bootstrap_sass()}}) can consume (their \code{theme} argument
defaults to \code{bs_theme_get()}, which get the current global theme). Use
\code{\link[=bs_theme_add]{bs_theme_add()}} to add additional SASS to the existing global theme.
Use \code{\link[=bs_theme_add_variables]{bs_theme_add_variables()}} to add SASS variable to the existing global
theme. Use \code{\link[=bs_theme_set_theme]{bs_theme_set_theme()}} to set a theme object (i.e., the return value)
of \code{\link[=bs_theme_get]{bs_theme_get()}} to the current theme.
}
\examples{

# Theming by overriding Bootstrap variable defaults
bs_theme_add_variables(primary = "red !default;")
foo_color <- ".foo { color: rgba($primary, 0.3) }"
bootstrap_sass(foo_color)
bootstrap_sass(foo_color, theme = NULL)

# Generate CSS using Bootstrap variables/function/mixins
primary_contrast <- list("primary-contrast" = "color-yiq($primary) !default;")
bs_theme_add(rules = primary_contrast)
bs_sass_partial(
  ".bar { color: $primary-contrast }"
)

# For complex theming projects, it may be useful to combine
# individually packaged themes via bs_theme_merge() which
# combines several theme into one by layering them
# together like an onion -- the pre sass for latter themes
# (e.g., blue_primary) is placed _before_ pre sass for former
# themes (e.g., red_primary) and post sass for latter themes
# is placed _after_ the post sass for former themes
bs_theme_add_variables(primary = "blue !default;")
bs_theme_add_variables(primary = "red !default;")
# The red theme wins out
bs_sass_partial(foo_color, theme = primary)

}
\references{
\url{https://getbootstrap.com/docs/4.4/getting-started/theming/}
}
