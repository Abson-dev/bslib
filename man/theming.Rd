% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/themes.R
\name{bs_theme_new}
\alias{bs_theme_new}
\alias{bs_theme_get}
\alias{bs_theme_clear}
\alias{bs_theme_set}
\alias{bs_theme_create}
\title{Create a Bootstrap theme}
\usage{
bs_theme_new(version = version_default(), bootswatch = NULL)

bs_theme_get()

bs_theme_clear()

bs_theme_set(theme)

bs_theme_create(version = version_default(), bootswatch = NULL)
}
\arguments{
\item{version}{The major version of Bootstrap to use. A value of
\code{'4+3'} means Bootstrap 4, but with additional CSS/JS to support
BS3 style markup in BS4. Other supported versions include 3 and 4.}

\item{bootswatch}{The name of a bootswatch theme.
See \code{\link[=bootswatch_themes]{bootswatch_themes()}} to list possible names.}

\item{theme}{a theme object (i.e., the return value of \code{bs_theme_get()}).}
}
\description{
\code{bs_theme_new()} creates a new (global) Bootstrap Sass theme which
\code{\link[=bootstrap]{bootstrap()}} (or \code{\link[=bootstrap_sass]{bootstrap_sass()}}) can consume (their \code{theme} argument
defaults to \code{bs_theme_get()}, which get the current global theme). Once a
global theme has been created, theme customization may be added via
'high-level' (e.g., \code{\link[=bs_theme_base_colors]{bs_theme_base_colors()}})
and/or 'low-level' (e.g., \code{\link[=bs_theme_add_variables]{bs_theme_add_variables()}}) customizations.
}
\examples{

# Themes are stored globally, and if there is no theme present,
# bs_theme_get() returns NULL
bs_theme_clear()
bs_theme_get()

# Use latest Bootstrap version, default theme
bs_theme_new()

# When a theme is set, bs_theme_get() returns all the Sass code
# necessary to compile Bootstrap, plus any theming customizations.
class(bs_theme_get())

# Helpful if you want to know the Bootstrap version of the current theme
theme_version()

# Can create a theme and return the object, instead of setting it globally.
bs_theme_create()

# Preview the current theme styling in a shiny app
if (interactive()) bs_theme_preview()

# Latest Bootstrap version, minty theme
bs_theme_new(bootswatch = "minty")
theme_bootswatch()
if (interactive()) bs_theme_preview()

# Use Bootstrap 3 with theme customization
bs_theme_new(3)
bs_theme_base_colors(bg = "#444", fg = "#e4e4e4")
bs_theme_accent_colors(primary = "#e39777")
if (interactive()) bs_theme_preview(with_themer = FALSE)

# Since themes are sass layers, you can work with them
# locally as if they were any other Sass layer
# (i.e. you don't have to modify global state to add theme customizations)
bs_theme_new("4+3")
theme <- sass::sass_layer_merge(
  bs_theme_get(),
  sass::sass_layer(defaults = list("primary" = "red !default"))
)
bootstrap_sass(
  ".my-class { color: mix($primary, $secondary, 50\%); }",
  theme
)

}
\references{
\url{https://getbootstrap.com/docs/4.4/getting-started/theming/}

\url{https://rstudio.github.io/sass/}
}
\seealso{
\code{\link[=bootstrap]{bootstrap()}}, \code{\link[=bs_theme_preview]{bs_theme_preview()}}, \code{\link[=bs_theme_base_colors]{bs_theme_base_colors()}}, \code{\link[=bs_theme_add_variables]{bs_theme_add_variables()}}
}
